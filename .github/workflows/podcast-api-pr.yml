name: Podcast API CICD - Staging

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/Services/Podcasts/**'
      - 'deploy/Services/api.bicep'
      - '.github/workflows/podcast-api.yml'

  workflow_dispatch:

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}staging
  STORAGE_NAME: ${{ secrets.STORAGE_NAME }}staging
  PODCASTDB_SERVER_NAME: ${{secrets.PODCASTDB_SERVER_NAME}}staging
  KUBERNETES_ENV_NAME: ${{secrets.KUBERNETES_ENV_NAME}}staging
  WORKSPACE_NAME: ${{secrets.WORKSPACE_NAME}}staging
  API_RESOURCE_NAME: podcastapicastaging
  UPDATER_RESOURCE_NAME: podcastupdatercastaging

jobs:

  build-pr:
    if: ${{ github.event_name == 'pull_request'}}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build Podcast Updater
        run: docker build -f ./src/Services/Podcasts/Podcast.Updater.Worker/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/podcastupdaterworker:${{ github.sha }} .

      - name: Build Podcast API
        run: docker build -f ./src/Services/Podcasts/Podcast.API/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/podcastapi:${{ github.sha }} .

      - name: Build Podcast Ingestion
        run: docker build -f ./src/Services/Podcasts/Podcast.Ingestion.Worker/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/podcastingestionworker:${{ github.sha }} .

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Deploy ACR
        uses: azure/powershell@v1
        with:
            azPSVersion: '3.1.0'
            inlineScript: |
              az deployment group create -n ghactionbgtasks${{ github.sha }} -g ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} --template-file deploy/Services/acr.bicep --parameters acrName=${{env.ACR_NAME}}

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: Build Podcast Updater
        run: | 
          docker build -f ./src/Services/Podcasts/Podcast.Updater.Worker/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/podcastupdaterworker:${{ github.sha }} .
          docker push ${{ env.ACR_NAME }}.azurecr.io/podcastupdaterworker:${{ github.sha }}

      - name: Build Podcast API
        run: | 
          docker build -f ./src/Services/Podcasts/Podcast.API/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/podcastapi:${{ github.sha }} .
          docker push ${{ env.ACR_NAME }}.azurecr.io/podcastapi:${{ github.sha }}

      - name: Build Podcast Ingestion
        run: | 
          docker build -f ./src/Services/Podcasts/Podcast.Ingestion.Worker/Dockerfile -t ${{ env.ACR_NAME }}.azurecr.io/podcastingestionworker:${{ github.sha }} .
          docker push ${{ env.ACR_NAME }}.azurecr.io/podcastingestionworker:${{ github.sha }}

  deploy:
    needs: build-and-push
    environment: 
      name: prod
    if: ${{ github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Deploy Container Apps
        uses: azure/powershell@v1
        with:
            azPSVersion: '3.1.0'
            failOnStandardError: true
            inlineScript: |
             $ACR_LOGIN_SERVER="${{env.ACR_NAME}}.azurecr.io"
             $ACR_PASSWORD=$(az acr credential show -g ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} -n ${{env.ACR_NAME}} -o tsv --query passwords[0].value)

             az deployment group create -n ghaction${{ github.sha }} `
                --resource-group  ${{secrets.AZURE_RESOURCE_GROUP_NAME}} `
                --template-file deploy/Services/api.bicep `
                --parameters acrPassword=$ACR_PASSWORD acrLogin=${{env.ACR_NAME}} acrLoginServer=$ACR_LOGIN_SERVER imageTag=${{ github.sha }} administratorLogin=${{secrets.PODCASTDB_USER_LOGIN}} administratorLoginPassword=${{secrets.PODCASTDB_USER_PASSWORD}} storageAccountName=${{ env.STORAGE_NAME }} serverName=${{env.PODCASTDB_SERVER_NAME}} kubernetesEnvName=${{env.KUBERNETES_ENV_NAME}} workspaceName=${{env.WORKSPACE_NAME}} apiName=${{env.API_RESOURCE_NAME}} updaterName=${{env.UPDATER_RESOURCE_NAME}}

             if( $LASTEXITCODE -ne 0 ) { exit -1 }
            
      - name: Upload Images
        uses: azure/powershell@v1
        with:
            azPSVersion: '3.1.0'
            inlineScript: |
              cd deploy/Images
              ./Deploy-Images.ps1 -resourceGroup ${{ secrets.AZURE_RESOURCE_GROUP_NAME }} -storageName ${{ env.STORAGE_NAME }}
